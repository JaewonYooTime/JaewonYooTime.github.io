---
layout: post
title:  "타입스크립트를 사용해야 하는 이유: 정적 타입 검사 및 코드 가독성 향상"
date:   2024-07-16 19:00:22 +0900
categories: Why Typescript
---

# 시작하며.

타입스크립트는 자바스크립트의 슈퍼셋으로서 정적 타입 시스템을 도입하여 코드의 안정성과 가독성을 높이는 역할을 합니다. 이 포스팅에서는 타입스크립트를 사용해야 하는 이유 중 특히 정적 타입 검사와 코드 가독성 및 유지보수성 향상에 초점을 맞추어 논의합니다.

## 타입스크립트 정의

타입스크립트(TypeScript)는 마이크로소프트가 개발한 프로그래밍 언어로, 자바스크립트에 정적 타입(static type)을 추가한 형태입니다. 이는 자바스크립트 코드에 대해 컴파일 시점에서 타입 검사를 수행하여 오류를 사전에 방지하고 코드의 명확성을 증대시킵니다.

## 1. 정적 타입 검사

### 정의

정적 타입 검사는 코드가 실행되기 전에 변수와 함수의 타입을 검증하여 타입 관련 오류를 사전에 발견하는 과정입니다. 이는 컴파일 단계에서 이루어지며, 타입스크립트는 이러한 정적 타입 검사를 통해 코드의 안전성을 보장합니다.

### 장점

1. **오류 사전 검출**: 타입스크립트는 컴파일 단계에서 타입 오류를 검출합니다. 이는 런타임 에러를 줄이며, 개발자가 코드를 작성하는 과정에서 발생할 수 있는 실수를 사전에 차단합니다.
2. **명확한 코드 의도**: 타입을 명시함으로써 코드의 의도를 명확하게 표현할 수 있습니다. 이는 코드 리뷰 및 유지보수 시 코드의 이해를 돕습니다.

### 예시

#### 자바스크립트 예시

자바스크립트에서는 변수에 타입을 명시하지 않기 때문에 타입 오류를 사전에 검출할 수 없습니다.

```javascript
function add(a, b) {
    return a + b;
}

console.log(add(5, '10')); // 510 (문자열 연결), 런타임에 오류 발생 가능
```

위 예시에서 `add` 함수는 두 개의 인자를 받아 더합니다. 그러나 문자열과 숫자를 더하면 의도하지 않은 결과가 발생할 수 있습니다. `5 + '10'`은 숫자 덧셈이 아닌 문자열 연결이 되어 `'510'`이라는 결과를 초래합니다.

#### 타입스크립트 예시

타입스크립트에서는 변수와 함수의 타입을 명시하여 이러한 오류를 사전에 방지할 수 있습니다.

```typescript
function add(a: number, b: number): number {
    return a + b;
}

console.log(add(5, '10')); // 컴파일 오류: '10'은 number 타입이 아님
```

위 코드에서 `add` 함수는 두 개의 숫자를 더하도록 정의되어 있습니다. 함수의 매개변수 `a`와 `b`는 `number` 타입으로 명시되어 있습니다. 따라서 `add(5, '10')`과 같이 문자열을 인자로 전달하면 컴파일 단계에서 오류가 발생합니다. 이는 잘못된 타입 사용을 사전에 방지하여 런타임 오류를 줄이는 데 도움이 됩니다.

## 2. 코드 가독성 및 유지보수성 향상

### 정의

코드 가독성은 코드를 쉽게 읽고 이해할 수 있는 정도를 의미합니다. 유지보수성은 코드가 변경이나 확장을 위해 얼마나 쉽게 수정될 수 있는지를 나타냅니다. 타입스크립트는 명확한 타입 정의를 통해 이 두 가지 측면에서 큰 장점을 제공합니다.

### 장점

1. **명확한 타입 정의**: 인터페이스와 타입 별칭을 사용하여 코드의 구조와 데이터 형태를 명확하게 정의할 수 있습니다. 이는 코드의 가독성을 높이고, 팀원 간의 협업을 원활하게 합니다.
2. **자동 완성 및 도구 지원**: 타입스크립트는 현대적인 IDE에서 강력한 지원을 받습니다. 자동 완성, 코드 탐색, 리팩토링 도구 등의 기능을 통해 개발 생산성을 높이고, 코드의 유지보수를 용이하게 합니다.

### 예시

#### 자바스크립트 예시

자바스크립트에서는 객체의 구조나 함수의 인자 타입을 명확히 알기 어렵습니다.

```javascript
function getUserInfo(user) {
    return `User: ${user.name}, Email: ${user.email}`;
}

const user = { id: 1, name: 'John Doe', email: 'john@example.com' };
console.log(getUserInfo(user)); 
```

위 예시에서 `getUserInfo` 함수의 인자 `user`의 구조를 이해하기 위해서는 코드 전체를 분석해야 합니다. 또한, `user` 객체의 속성 타입을 미리 알 수 없어 사용 시 실수가 발생할 가능성이 높습니다.

#### 타입스크립트 예시

타입스크립트에서는 인터페이스를 사용하여 객체의 구조를 명확히 정의할 수 있습니다.

```typescript
interface User {
    id: number;
    name: string;
    email: string;
}

function getUserInfo(user: User): string {
    return `User: ${user.name}, Email: ${user.email}`;
}

const user: User = { id: 1, name: 'John Doe', email: 'john@example.com' };
console.log(getUserInfo(user)); 
```

위 코드에서 `User` 인터페이스는 사용자 객체의 구조를 명확하게 정의합니다. `User` 인터페이스는 `id`, `name`, `email` 속성이 각각 `number`, `string`, `string` 타입임을 명시합니다. `getUserInfo` 함수는 `User` 타입의 객체를 인자로 받으며, 이를 통해 함수가 기대하는 입력 값의 형태를 명확히 알 수 있습니다.

또한, `user` 객체는 `User` 인터페이스를 구현하여 선언되므로, 객체의 구조와 타입이 일치하는지 컴파일 시점에서 검증됩니다. 이는 코드의 가독성을 높이고, 새로운 팀원이 코드를 이해하는 데 도움을 줍니다.

## 결론

타입스크립트는 자바스크립트에 정적 타입을 추가하여 코드의 안정성과 가독성을 크게 향상시킵니다. 정적 타입 검사를 통해 런타임 오류를 사전에 방지하고, 명확한 타입 정의를 통해 코드의 가독성과 유지보수성을 증대시킬 수 있습니다. 이러한 이유로 타입스크립트는 현대적인 웹 개발에서 중요한 도구로 자리 잡고 있습니다.

레퍼런스:
- [TypeScript 공식 문서](https://www.typescriptlang.org/docs/)
- [TypeScript GitHub](https://github.com/microsoft/TypeScript)
- [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/intro.html)